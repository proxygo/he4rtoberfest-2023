import Foundation

class Palindrome {
    func isPalindrome(_ s: String) -> Bool {
        let alphanumericString = s.lowercased().components(separatedBy: CharacterSet.alphanumerics.inverted).joined()
        return alphanumericString == String(alphanumericString.reversed())
    }
}

let p = Palindrome()
// MARK: - Case tests
print("\"\"", p.isPalindrome("") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, string vazia √© considerada um pal√≠ndromo
print("\"A man a plan a canal Panama\"", p.isPalindrome("A man a plan a canal Panama") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, com espa√ßos
print("\"Was it a car or a cat I saw?\"", p.isPalindrome("Was it a car or a cat I saw?") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, com pontua√ß√£o

print("\"Hello, World!\"", p.isPalindrome("Hello, World!") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // false, caracteres n√£o alfanum
print("\"1234567890\"", p.isPalindrome("1234567890") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // false, apenas n√∫meros

print("\"MaDaM\"", p.isPalindrome("MaDaM") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, a fun√ß√£o trata letras mai√∫sculas e min√∫sculas da mesma maneira
print("\"race car!\"", p.isPalindrome("race car!") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, ignorando o ponto de exclama√ß√£o
print("\"No lemon, no melon\"", p.isPalindrome("No lemon, no melon") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, ignorando as v√≠rgulas e espa√ßos

print("\"üëçradarüëç\"", p.isPalindrome("üëçradarüëç") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, considerando emojis
print("\"√∂√â√∂\"", p.isPalindrome("√∂√â√∂") ? "√© um pal√≠ndromo" : "n√£o √© um pal√≠ndromo") // true, considerando caracteres acentuados
